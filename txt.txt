Create REST api with Express and Js For Movie and Actor management.
The api should store data in memory.

for simplicity lets say actor can be involved in just a single movie.

1. Actor can have FirstName, LastName and DateOfBirth
2. Date of birth cannot be in future, message must be returned with 400
3. Movie can have title, creationDate and a single actor associated. Actor Id has to be supplied.
4. When creating movie, if actor id is not supplied, 400 has to be returned. If Actor does not exist, 404 must be returned.
5. Create CRUD for Movies and Actors

-----------------------------------------------------

Steps:
Initialize a Node.js project:

Create a folder for your project.
Inside the folder, run npm init -y to initialize the project.
Install the necessary dependencies:
bash
Copy code
npm install express
npm install body-parser
Create the API in a file (e.g., index.js):

index.js:

const express = require('express');
const bodyParser = require('body-parser');
const app = express();

app.use(bodyParser.json());

// In-memory storage
let actors = [];
let movies = [];
let nextActorId = 1;
let nextMovieId = 1;

// Helper function to validate date
const isValidDate = (dateStr) => {
    const date = new Date(dateStr);
    return date instanceof Date && !isNaN(date.getTime());
};

const isFutureDate = (dateStr) => {
    const now = new Date();
    const inputDate = new Date(dateStr);
    return inputDate > now;
};

// CRUD for Actors

// Create an Actor
app.post('/actors', (req, res) => {
    const { firstName, lastName, dateOfBirth } = req.body;
    
    if (!firstName || !lastName || !dateOfBirth) {
        return res.status(400).json({ message: "FirstName, LastName, and DateOfBirth are required" });
    }

    if (!isValidDate(dateOfBirth) || isFutureDate(dateOfBirth)) {
        return res.status(400).json({ message: "Invalid Date of Birth. Date cannot be in the future." });
    }

    const newActor = {
        id: nextActorId++,
        firstName,
        lastName,
        dateOfBirth
    };

    actors.push(newActor);
    res.status(201).json(newActor);
});

// Get all Actors
app.get('/actors', (req, res) => {
    res.json(actors);
});

// Get an Actor by ID
app.get('/actors/:id', (req, res) => {
    const actorId = parseInt(req.params.id);
    const actor = actors.find(a => a.id === actorId);

    if (!actor) {
        return res.status(404).json({ message: "Actor not found" });
    }

    res.json(actor);
});

// Update an Actor
app.put('/actors/:id', (req, res) => {
    const actorId = parseInt(req.params.id);
    const actor = actors.find(a => a.id === actorId);

    if (!actor) {
        return res.status(404).json({ message: "Actor not found" });
    }

    const { firstName, lastName, dateOfBirth } = req.body;

    if (dateOfBirth && (isFutureDate(dateOfBirth) || !isValidDate(dateOfBirth))) {
        return res.status(400).json({ message: "Invalid Date of Birth. Date cannot be in the future." });
    }

    actor.firstName = firstName || actor.firstName;
    actor.lastName = lastName || actor.lastName;
    actor.dateOfBirth = dateOfBirth || actor.dateOfBirth;

    res.json(actor);
});

// Delete an Actor
app.delete('/actors/:id', (req, res) => {
    const actorId = parseInt(req.params.id);
    const actorIndex = actors.findIndex(a => a.id === actorId);

    if (actorIndex === -1) {
        return res.status(404).json({ message: "Actor not found" });
    }

    // Remove the actor from the array
    actors.splice(actorIndex, 1);
    res.status(204).send();
});

// CRUD for Movies

// Create a Movie
app.post('/movies', (req, res) => {
    const { title, creationDate, actorId } = req.body;

    if (!title || !creationDate || !actorId) {
        return res.status(400).json({ message: "Title, CreationDate, and ActorId are required" });
    }

    if (!isValidDate(creationDate)) {
        return res.status(400).json({ message: "Invalid Creation Date" });
    }

    const actor = actors.find(a => a.id === actorId);
    if (!actor) {
        return res.status(404).json({ message: "Actor not found" });
    }

    const newMovie = {
        id: nextMovieId++,
        title,
        creationDate,
        actor
    };

    movies.push(newMovie);
    res.status(201).json(newMovie);
});

// Get all Movies
app.get('/movies', (req, res) => {
    res.json(movies);
});

// Get a Movie by ID
app.get('/movies/:id', (req, res) => {
    const movieId = parseInt(req.params.id);
    const movie = movies.find(m => m.id === movieId);

    if (!movie) {
        return res.status(404).json({ message: "Movie not found" });
    }

    res.json(movie);
});

// Update a Movie
app.put('/movies/:id', (req, res) => {
    const movieId = parseInt(req.params.id);
    const movie = movies.find(m => m.id === movieId);

    if (!movie) {
        return res.status(404).json({ message: "Movie not found" });
    }

    const { title, creationDate, actorId } = req.body;

    if (creationDate && !isValidDate(creationDate)) {
        return res.status(400).json({ message: "Invalid Creation Date" });
    }

    if (actorId) {
        const actor = actors.find(a => a.id === actorId);
        if (!actor) {
            return res.status(404).json({ message: "Actor not found" });
        }
        movie.actor = actor;
    }

    movie.title = title || movie.title;
    movie.creationDate = creationDate || movie.creationDate;

    res.json(movie);
});

// Delete a Movie
app.delete('/movies/:id', (req, res) => {
    const movieId = parseInt(req.params.id);
    const movieIndex = movies.findIndex(m => m.id === movieId);

    if (movieIndex === -1) {
        return res.status(404).json({ message: "Movie not found" });
    }

    // Remove the movie from the array
    movies.splice(movieIndex, 1);
    res.status(204).send();
});

// Start the server
const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
How to run:
Create the index.js file with the code provided.
Run the server:
bash
Copy code
node index.js
The server will be running on http://localhost:3000.
API Endpoints:
Actors Endpoints:

Create Actor: POST /actors with firstName, lastName, and dateOfBirth in the body.
Get All Actors: GET /actors
Get Actor by ID: GET /actors/:id
Update Actor: PUT /actors/:id with optional firstName, lastName, and dateOfBirth in the body.
Delete Actor: DELETE /actors/:id
Movies Endpoints:

Create Movie: POST /movies with title, creationDate, and actorId in the body.
Get All Movies: GET /movies
Get Movie by ID: GET /movies/:id
Update Movie: PUT /movies/:id with optional title, creationDate, and actorId in the body.
Delete Movie: DELETE /movies/:id
Validation Rules:
Actor's dateOfBirth must not be in the future.
Movie must have a valid actorId, and the actor must exist.
All required fields must be provided during the creation process for both actors and movies.


-------------------------------------------------------


In lecture 9 you have developed an api for MOvie and Actor management.
It store data in memory.

Requirement:
1. Replace in memory storage to use PostgreSQL local database.


